package org.apache.giraph.plan;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class QueryPlan {
	
	ArrayList<QueryNode> queryNodes;
	
	public QueryPlan() { 
		queryNodes = new ArrayList<QueryNode> ();
	}
	
	public void initialize() {
		/* sort the query nodes in descend order of query node's level. */
		Collections.sort(queryNodes, new Comparator<QueryNode> () {

			@Override
			public int compare(QueryNode one, QueryNode two) {
				return two.getLevel() - one.getLevel();
			}
			
		});
	}
	
	public void add(QueryNode qn) {
		qn.setNodeId(queryNodes.size());
		queryNodes.add(qn);
	}

	public void write(DataOutputStream out) throws IOException {
		int size = queryNodes.size();
		out.writeInt(size);
		for(QueryNode qn : queryNodes) {
			qn.write(out);
		}
	}
	
	public void readFields(DataInputStream in) throws IOException {
		int size = in.readInt();
		if(queryNodes == null) {
			queryNodes = new ArrayList<QueryNode> ();
		}
		else {
			queryNodes.clear();
		}
		for(int i = 0; i < size; i++) {
			QueryNode qn = new QueryNode();
			qn.readFields(in);
			queryNodes.add(qn);
		}
	}
	
	public String toString() {
		StringBuffer res = new StringBuffer();
		res.append("\nQuery plan size: "+ queryNodes.size());
		for(QueryNode qn : queryNodes) {
			res.append("\n\t"+qn.toString());
		}
		return res.toString();
	}

	public ArrayList<QueryNode> getQueryByLevel(long superstep) {
		int maxLevel = queryNodes.get(0).getLevel();
		int curLevel = (int)(maxLevel - superstep);
		ArrayList<QueryNode> res = new ArrayList<QueryNode>();
		for(QueryNode qn : queryNodes) {
			if(qn.getLevel() == curLevel)
				res.add(qn);
		}
		return res;
	}
	
}
