Preprocess:
    1) The input graph is undirected and the IDs of vertices are relabeled according to their degrees. The smaller degree has smaller ID. This preprocess simplifies the comparison during the computation.
    2) The default format of the input graph is adjacency.
    3) The edge index should be provided, which is produced by "EdgeIndexBuilder.java" in Tool.zip
    4) To break automorphism of the input query graphs, the input query graph should be processed by â€œQuerySymmetryBroker.java" in Tool.zip
    5) a vertex2Labelmap file which records the degree statistics should be provided as well. This file can be generated by "DegreeCounter.java" in Tool.zip

    NOTE: The Tools.zip includes some basic tools for the preprocess.

Tiny-Sample-Dataset (Other files are corresponding to the example in our paper):
    1) (relabeled) data graph: tiny-sample-graph.adj.relabel.data
    2) pattern graph: square-pattern-graph
    3) partial orders for breaking automorphism: square-pattern-graph.edgeorientation
    4) edge index: edgeindex-default.relabel
    5) vertex2Labelmap file: tiny-sample-graph.degree

Run Command (the path of files should be changed according to your local cluster configuration.):
    ./test-tool.sh -g subgraphmatch -a GeneralQueryNL -f tiny-sample-graph.adj.relabel.data -pn 2 -vm tiny-sample-graph-graph.degree -ei edgeindex-default.relabel -eo square-pattern-graph.edgeorientation -qp sqaure-pattern-graph -pv 1

NOTE:
    -pv: specify the initial pattern vertex, which is determined offline.
    -pn: specify the number of partitions.
in current version, the number of partitions and the number of workers should be the same.

Main (not all) soruce code location:
- Algorithm Entry: giraph-example fold: org.apache.giraph.tools.graphanalytics.GeneralQueryNL
- Distributors: giraph-core fold: org.apache.giraph.graph.Distributor; (three types: random, roltte, workload)
